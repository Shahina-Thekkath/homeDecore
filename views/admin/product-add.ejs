<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=0"
    />
    <meta name="description" content="POS - Bootstrap Admin Template" />
    <meta
      name="keywords"
      content="admin, estimates, bootstrap, business, corporate, creative, invoice, html5, responsive, Projects"
    />
    <meta name="author" content="Dreamguys - Bootstrap Admin Template" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Dreams Pos admin template</title>

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />

    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="/admin-assets/img/favicon.jpg"
    />

    <link rel="stylesheet" href="/admin-assets/css/bootstrap.min.css" />

    <link rel="stylesheet" href="/admin-assets/css/animate.css" />

    <link
      rel="stylesheet"
      href="/admin-assets/plugins/select2/css/select2.min.css"
    />

    <link
      rel="stylesheet"
      href="/admin-assets/css/dataTables.bootstrap4.min.css"
    />

    <link
      rel="stylesheet"
      href="/admin-assets/plugins/fontawesome/css/fontawesome.min.css"
    />
    <link
      rel="stylesheet"
      href="/admin-assets/plugins/fontawesome/css/all.min.css"
    />

    <link rel="stylesheet" href="/admin-assets/css/style.css" />

    <style>
      .thumbnails-container {
        display: flex;
        overflow-x: auto;
      }

      .thumbnail {
        margin-right: 10px;
      }
      .input-upload {
        position: relative;
      }

      .error-message {
        color: red;
        display: none;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />
    <link rel="stylesheet" href="/admin-assets/css/logo.css" />

  </head>

  <body>
    <div id="global-loader">
      <div class="whirly-loader"></div>
    </div>

    <div class="main-wrapper">
      <div class="header">
        <div class="header-left active">
          <a href="/admin/dashboard" class="logo">
                    <%- include('../../views/partials/icons/icon-logo') %>
                </a>
        </div>

        <a id="mobile_btn" class="mobile_btn" href="#sidebar">
          <span class="bar-icon">
            <span></span>
            <span></span>
            <span></span>
          </span>
        </a>

        <div class="dropdown mobile-user-menu">
          <a
            href="javascript:void(0);"
            class="nav-link dropdown-toggle"
            data-bs-toggle="dropdown"
            aria-expanded="false"
            ><i class="fa fa-ellipsis-v"></i
          ></a>
          <div class="dropdown-menu dropdown-menu-right">
            <a class="dropdown-item" href="profile.html">My Profile</a>
            <a class="dropdown-item" href="generalsettings.html">Settings</a>
            <a class="dropdown-item" href="signin.html">Logout</a>
          </div>
        </div>
      </div>

      <div class="sidebar" id="sidebar">
        <div class="sidebar-inner slimscroll">
          <div id="sidebar-menu" class="sidebar-menu">
            <ul>
              <li class="">
                <a href="/admin/dashboard"><span> Dashboard</span> </a>
              </li>

              <li class="">
                <a href="/admin/users"><span> Users</span> </a>
              </li>

              <li class="active">
                <a href="/admin/productList"><span> Products</span> </a>
              </li>
              <li class="">
                <a href="/admin/category"><span> Category</span> </a>
              </li>
              <li class="">
                <a href="/admin/orderList"><span> Orders</span> </a>
              </li>
              <li class="">
                <a href="/admin/coupon"><span> Coupon</span> </a>
              </li>
              <li class="">
                <a href="/admin/offer"><span> Offer</span> </a>
              </li>
              <li class="">
                <a href="/admin/salesReport"><span> Sales Report</span> </a>
              </li>
              <li class="">
                <a
                  onclick="message(successMessage= 'Logout Successfully')"
                  href="/admin/logout"
                  ><span> Logout</span>
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>

      <div class="page-wrapper">
        <div class="content">
          <div class="page-header">
            <div class="page-title">
              <h4>Product Add</h4>
              <h6>Create new product</h6>
            </div>
          </div>

          <div class="card">
            <div class="card-body">
              <form
                action="/admin/products/addProducts"
                method="POST"
                id="addProductForm"
                enctype="multipart/form-data"
                novalidate
              >
                <div class="row">
                  <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                      <label>Product Name</label>
                      <input
                        type="text"
                        class="form-control"
                        name="productName"
                        placeholder="Enter product name"
                      />
                      <p id="productName-error" class="error-message"></p>
                    </div>
                  </div>
                  <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                      <label>Category</label>
                      <select class="select" name="categoryId" id="categoryId">
                        <% category.forEach((category) => { %>
                        <option value="<%= category._id %>">
                          <%= category.name %>
                        </option>
                        <% }) %>
                      </select>
                      <div id="category-error" class="error-message"></div>
                    </div>
                  </div>

                  <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                      <label>Price</label>
                      <input
                        type="number"
                        class="form-control"
                        name="price"
                        placeholder="Enter product price"
                      />
                      <p id="regularPrice-error" class="error-message"></p>
                    </div>
                  </div>

                  <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                      <label>Quantity</label>
                      <input
                        type="number"
                        class="form-control"
                        name="quantity"
                      />
                      <p id="quantity-error" class="error-message"></p>
                    </div>
                  </div>

                  <div class="col-lg-12">
                    <div class="form-group">
                      <label for="descriptionid">Description</label>
                      <textarea
                        class="form-control"
                        name="description"
                        id="descriptionid"
                      ></textarea>
                      <p
                        style="color: red"
                        id="description-error"
                        class="error-message"
                      ></p>
                    </div>
                  </div>

                  <div class="col-lg-12">
                    <div class="form-group">
                      <label for="productSpecificationid"
                        >Product Specification</label
                      >
                      <div id="specificationsContainer"></div>
                      <button
                        type="button"
                        id="addSpecification"
                        class="btn btn-secondary mt-2"
                      >
                        Add Specification
                      </button>
                    </div>
                  </div>

                  <div class="card mb-2">
                    <div class="card-header"><h4>Choose images</h4></div>
                    <div class="border row">
                      <div
                        id="addedImagesContainer"
                        class="thumbnails-container"
                      ></div>
                    </div>

                    <div class="row">
                      <div
                        class="card-body align-items-center"
                        style="margin-bottom: 20px"
                      >
                        <input
                          type="file"
                          class="form-control"
                          name="images"
                          id="inputFiles"
                          accept="image/png, image/jpeg, image/jpg"
                          multiple
                          onchange="handleFileSelect(event)"
                        />
                        <p id="image-error" class="error-message"></p>
                      </div>
                    </div>
                  </div>
                  <button
                    type="submit"
                    class="btn btn-md rounded font-sm hover-up"
                    onclick="validateAndSubmit()"
                  >
                    Submit
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <!-- Cropper.js CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />

<!-- Cropper.js JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>


    <script src="/admin-assets/js/jquery-3.6.0.min.js"></script>

    <script src="/admin-assets/js/feather.min.js"></script>

    <script src="/admin-assets/js/jquery.slimscroll.min.js"></script>

    <script src="/admin-assets/js/jquery.dataTables.min.js"></script>
    <script src="/admin-assets/js/dataTables.bootstrap4.min.js"></script>

    <script src="/admin-assets/js/bootstrap.bundle.min.js"></script>

    <script src="/admin-assets/plugins/select2/js/select2.min.js"></script>

    <script src="/admin-assets/plugins/sweetalert/sweetalert2.all.min.js"></script>
    <script src="/admin-assets/plugins/sweetalert/sweetalerts.min.js"></script>

    <script src="/admin-assets/js/script.js"></script>
    <script>
      $(document).ready(function () {
        let specificationCount = $(
          "#specificationsContainer .specification-group"
        ).length;
        console.log(specificationCount);

        $("#addSpecification").click(function () {
          $("#specificationsContainer").append(`
             <div class="specification-group">
                 <input type="text" name="specifications[${specificationCount}][key]" class="form-control" placeholder="Key" >
                 <p style="color: red;" id="invalidSpecKey${specificationCount}"></p>
                 <input type="text" name="specifications[${specificationCount}][value]" class="form-control mt-2" placeholder="Value" >
                 <p style="color: red;" id="invalidSpecValue${specificationCount}"></p>
             <button type="button" class="btn btn-danger mt-2 remove-btn">Remove Specification</button>
             </div>
         `);
          specificationCount++;
        });

        $("#specificationsContainer").on("click", ".remove-btn", function () {
          $(this).parent().remove();
        });
      });

      let selectedImages = [];

      function handleFileSelect(event) {
        const imageErrorElement = document.getElementById("image-error");
        if (imageErrorElement) {
          imageErrorElement.textContent = "";
        }

        const files = event.target.files;
        const container = document.getElementById("addedImagesContainer");

        container.innerHTML = "";
        selectedImages = [];

        if (files.length > 0) {
          Array.from(files).forEach((file, index) => {
            if (file.type.startsWith("image/")) {
              const reader = new FileReader();
              reader.onload = (e) => {
                const wrapper = document.createElement("div");
                wrapper.classList.add("image-wrapper");
                wrapper.style.marginBottom = "20px";
                wrapper.dataset.index = index;

                //create image preview
                const img = document.createElement("img");
                img.src = e.target.result;
                img.alt = `Selected Image ${index + 1}`;
                img.style.width = "300px";
                img.style.height = "300px";
                img.style.objectFit = "cover";
                img.id = `imgView${index}`;

                //create a div for the cropper
                const cropperContainer = document.createElement("div");
                cropperContainer.style.display = "none";
                cropperContainer.style.marginTop = "10px";
                cropperContainer.classList.add("image-cropper");
                const croppedImg = document.createElement("img");
                croppedImg.id = `croppedImg${index}`;
                cropperContainer.appendChild(croppedImg);

                //create a "save" button for cropping
                const saveButton = document.createElement("button");
                saveButton.setAttribute("type", "button");
                saveButton.type = "button";
                saveButton.textContent = "Crop";
                saveButton.classList.add(
                  "btn",
                  "btn-primary",
                  "btn-sm",
                  "save-button"
                );
                saveButton.style.marginTop = "10px";
                saveButton.id = `saveButton${index}`;

                // Create a "remove" button for removing the image
                const removeButton = document.createElement("button");
                removeButton.textContent = "Remove";
                removeButton.classList.add(
                  "btn",
                  "btn-danger",
                  "btn-sm",
                  "remove-button"
                );
                removeButton.style.marginTop = "10px";
                removeButton.style.marginLeft = "10px";
                removeButton.id = `removeButton${index}`;

                //Append cropper container and save button
                cropperContainer.appendChild(saveButton);

                //Append all elements to the wrappper
                wrapper.appendChild(img);
                wrapper.appendChild(cropperContainer);
                wrapper.appendChild(removeButton);
                container.appendChild(wrapper);

                selectedImages.push(file);

                //Initialize cropper on image click
                img.addEventListener("click", () =>
                  initializeCropper(
                    img,
                    croppedImg,
                    saveButton,
                    cropperContainer,
                    file,
                    index
                  )
                );

                //Add remove functionality
                removeButton.addEventListener("click", () => {
                  // Remove the wrapper from the DOM
                  wrapper.remove();

                  // Remove the file from selectedImages
                  selectedImages.splice(index, 1);

                  // Recreate the FileList with remaining files
                  const dataTransfer = new DataTransfer();
                  selectedImages.forEach((file) => {
                    dataTransfer.items.add(file);
                  });

                  // Update the file input
                  document.getElementById("inputFiles").files =
                    dataTransfer.files;

                  // Reindex the remaining images
                  const remainingWrappers =
                    container.getElementsByClassName("image-wrapper");
                  Array.from(remainingWrappers).forEach(
                    (remainingWrapper, newIndex) => {
                      remainingWrapper.dataset.index = newIndex;
                    }
                  );
                });
              };
              reader.readAsDataURL(file); //Read file as Data URL
            }
          });
        }
      }

      function initializeCropper(
        img,
        cropperImg,
        saveButton,
        cropperContainer,
        file,
        index
      ) {
        const cropper = new Cropper(img, {
          aspectRatio: 1,
          viewMode: 1,
        });
        

        cropperContainer.style.display = "block"; // show cropper container

        saveButton.onclick = () => {
          const cropperCanvas = cropper.getCroppedCanvas({
            width: 400, // specify desired width
            height: 400, // specify desired height
          });

          // Update the original img with cropped image
          img.src = cropperCanvas.toDataURL("image/png");

          // Update cropper preview image
          cropperImg.src = cropperCanvas.toDataURL("image/png");

          cropperCanvas.toBlob((blob) => {
            // Create a new File object from the blob
            const croppedFile = new File([blob], `cropped_img_${index}.png`, {
              type: "image/png",
            });

            // Update the specific file in selectedImages
            selectedImages[index] = croppedFile;

            // Recreate FileList with updated files
            const dataTransfer = new DataTransfer();
            selectedImages.forEach((file) => {
              dataTransfer.items.add(file);
            });

            // Update the file input
            document.getElementById("inputFiles").files = dataTransfer.files;

            cropper.destroy();
            cropperContainer.style.display = "none";

            // Change save button text to indicate cropped
            saveButton.textContent = "Cropped";
            saveButton.disabled = true;
          }, "image/png");
        };
      }

      function clearErrorMessages() {
        const errorElements = document.getElementsByClassName("error-message");
        Array.from(errorElements).forEach((element) => {
          element.textContent = "";
          element.style.color = "red";
          element.style.display = "none"; // Hide error elements by default
        });
      }

      function validateForm() {
        clearErrorMessages();
        let isValid = true;

        // Product Name Validation
        const name = document.getElementsByName("productName")[0].value;
        const nameErrorElement = document.getElementById("productName-error");
        if (nameErrorElement) {
          // Add a check to ensure element exists
          if (name.trim() === "") {
            nameErrorElement.textContent = "Product name is required.";
            nameErrorElement.style.display = "block"; // Ensure visibility
            isValid = false;
          } else if (name.trim().length < 5) {
            nameErrorElement.textContent =
              "Product name must be at least 5 characters long.";
            nameErrorElement.style.display = "block";
            isValid = false;
          } else if (!/^[a-zA-Z\s\-\_()\[\]{}<>]+$/.test(name.trim())) {
            nameErrorElement.textContent =
              "Product name should contain only alphabetic characters.";
            nameErrorElement.style.display = "block";
            isValid = false;
          }
        } else {
          console.error("Product Name error element not found");
        }

        // Description Validation
        const description = document.getElementById("descriptionid").value;
        const descriptionErrorElement =
          document.getElementById("description-error");
        if (descriptionErrorElement) {
          if (description.trim() === "") {
            descriptionErrorElement.textContent =
              "Product description is required.";
            descriptionErrorElement.style.display = "block";
            isValid = false;
          } else if (description.trim().length < 10) {
            descriptionErrorElement.textContent =
              "Description must be at least 10 characters long.";
            descriptionErrorElement.style.display = "block";
            isValid = false;
          } else if (
            !/^[a-zA-Z0-9\s.,!?'"():;@#%&*\-\/]+$/.test(description.trim())
          ) {
            descriptionErrorElement.textContent =
              "Description should contain only alphabetic characters and punctuations only.";
            descriptionErrorElement.style.display = "block";
            isValid = false;
          }
        }

      

        // Price Validation
        const price = document.getElementsByName("price")[0].value;
        const priceErrorElement = document.getElementById("regularPrice-error");
        if (priceErrorElement) {
          if (price.trim() === "") {
            priceErrorElement.textContent = "Price is required.";
            priceErrorElement.style.display = "block";
            isValid = false;
          } else if (parseFloat(price) < 1) {
            priceErrorElement.textContent = "Price must be at least 1.";
            priceErrorElement.style.display = "block";
            isValid = false;
          }
        }

        // Quantity Validation
        const quantity = document.getElementsByName("quantity")[0].value;
        const quantityErrorElement = document.getElementById("quantity-error");
        if (quantityErrorElement) {
          if (quantity.trim() === "") {
            quantityErrorElement.textContent = "Quantity is required.";
            quantityErrorElement.style.display = "block";
            isValid = false;
          } else if (parseInt(quantity) < 1) {
            quantityErrorElement.textContent = "Quantity must be at least 1.";
            quantityErrorElement.style.display = "block";
            isValid = false;
          }
        }
        // Images Validation
        const imageErrorElement = document.getElementById("image-error");
        if (imageErrorElement) {
          if (selectedImages.length < 3) {
            imageErrorElement.textContent = "Minimum 3 images are required.";
            imageErrorElement.style.display = "block";
            isValid = false;
          }

          // Image Format Validation
          const invalidImages = selectedImages.filter(
            (file) => !["image/png"].includes(file.type)
          );
          if (invalidImages.length > 0) {
            imageErrorElement.textContent = "Only PNG images are allowed.";
            imageErrorElement.style.display = "block";
            isValid = false;
          }
        }

        // Category Validation
        const category = document.getElementsByName("categoryId")[0].value;
        const categoryErrorElement = document.getElementById("category-error");
        if (categoryErrorElement) {
          if (!category.trim()) {
            categoryErrorElement.textContent = "Please select a category.";
            categoryErrorElement.style.display = "block";
            isValid = false;
          }
        }

        
        // Product Specification Validation
        const specificationsContainer = document.getElementById(
          "specificationsContainer"
        );
        const specifications = specificationsContainer.getElementsByClassName(
          "specification-group"
        );
        let hasValidSpecifications = false;

        if (specifications.length === 0) {
  let existingErrorElement = specificationsContainer.querySelector(
    "p"
  );
  if (!existingErrorElement) {
    const specificationsErrorElement = document.createElement("p");
    specificationsErrorElement.textContent =
      "At least one specification is required.";
    specificationsErrorElement.style.color = "red";
    specificationsContainer.appendChild(specificationsErrorElement);
  }
  isValid = false;
}
 else {
          for (let i = 0; i < specifications.length; i++) {
            const keyInput = specifications[i].querySelector(
              'input[name^="specifications"][name$="[key]"]'
            );
            const valueInput = specifications[i].querySelector(
              'input[name^="specifications"][name$="[value]"]'
            );
            const keyErrorElement = specifications[i].querySelector(
              `[id^="invalidSpecKey"]`
            );
            const valueErrorElement = specifications[i].querySelector(
              `[id^="invalidSpecValue"]`
            );

            const key = keyInput.value.trim();
            const value = valueInput.value.trim();

            // Reset previous error messages
            if (keyErrorElement) keyErrorElement.textContent = "";
            if (valueErrorElement) valueErrorElement.textContent = "";

            // Validation regex to include all possible characters
            const specRegex = /^[a-zA-Z0-9\s.,!?'"():;@#%&*_\-\/\\]+$/;

            let specValid = true;

            // Key validation
            if (key === "") {
              if (keyErrorElement)
                keyErrorElement.textContent = "Specification key is required.";
              specValid = false;
            } else if (key.length < 2 || key.length > 15) {
              if (keyErrorElement)
                keyErrorElement.textContent =
                  "Key must be between 2 and 15 characters.";
              specValid = false;
            } else if (!specRegex.test(key)) {
              if (keyErrorElement)
                keyErrorElement.textContent =
                  "Key contains invalid characters.";
              specValid = false;
            }

            // Value validation
            if (value === "") {
              if (valueErrorElement)
                valueErrorElement.textContent =
                  "Specification value is required.";
              specValid = false;
            } else if (value.length < 2 || value.length > 15) {
              if (valueErrorElement)
                valueErrorElement.textContent =
                  "Value must be between 2 and 15 characters.";
              specValid = false;
            } else if (!specRegex.test(value)) {
              if (valueErrorElement)
                valueErrorElement.textContent =
                  "Value contains invalid characters.";
              specValid = false;
            }

            // If this specification is valid, mark that we have at least one valid specification
            if (specValid) {
              hasValidSpecifications = true;
            } else {
              isValid = false;
            }
          }

          // If no valid specifications were found
         
        }

        return isValid;
      }

       $("#addProductForm").on("submit", function (e) {
    e.preventDefault(); // stop normal form submission

    const form = this;
    const formData = new FormData(form);
        if (validateForm()) {
          
        try {
              $.ajax({
              url: "/admin/products/addProducts",
              type: "POST",
              data: formData,
              processData: false, // important for FormData
              contentType: false, // important for FormData
              success: function (response) {
                Swal.fire({
                  position: "center",
                  icon: "success",
                  title: response.message || "Product added successfully!",
                  showConfirmButton: false,
                  timer: 2000,
                }).then(() => {
                  window.location.href = "/admin/productList"; // redirect after success
                });
              },
              error: function (xhr) {
                if (xhr.responseJSON && xhr.responseJSON.errors) {
                  const errors = xhr.responseJSON.errors;

                  // Clear old errors
                  $(".error-message").text("");

                  if (errors.productName) {
                    $("#productName-error").text(errors.productName);
                  }
                  if (errors.categoryId) {
                    $("#category-error").text(errors.categoryId);
                  }
                  if (errors.price) {
                    $("#regularPrice-error").text(errors.price);
                  }
                  if (errors.quantity) {
                    $("#quantity-error").text(errors.quantity);
                  }
                  if (errors.description) {
                    $("#description-error").text(errors.description);
                  }
                  if (errors.images) {
                    $("#image-error").text(errors.images);
                  }
                } else {
                  Swal.fire({
                    icon: "error",
                    title: "Something went wrong!",
                  });
                }
              },
            });

        } catch (error) {
            console.error(error);
            Swal.fire('Server Error', 'Please try again later.', 'error');
        }
          
        }
        
      })

    </script>
    <script>
       function message(msg) {
        if (msg) {
          Swal.fire({
            positition: "center",
            icon: "success",
            title: msg,
            showConfirmButton: false,
            timer: 3000,
          }).then(() => {
            window.location.href = "/admin";
          });
        }
      }
    </script>
  </body>
</html>
