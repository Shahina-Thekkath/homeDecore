<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=0"
    />
    <meta name="description" content="POS - Bootstrap Admin Template" />
    <meta
      name="keywords"
      content="admin, estimates, bootstrap, business, corporate, creative, invoice, html5, responsive, Projects"
    />
    <meta name="author" content="Dreamguys - Bootstrap Admin Template" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Dreams Pos admin template</title>

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />

    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="/admin-assets/img/favicon.jpg"
    />

    <link rel="stylesheet" href="/admin-assets/css/bootstrap.min.css" />

    <link rel="stylesheet" href="/admin-assets/css/animate.css" />

    <link
      rel="stylesheet"
      href="/admin-assets/plugins/select2/css/select2.min.css"
    />

    <link
      rel="stylesheet"
      href="/admin-assets/css/dataTables.bootstrap4.min.css"
    />

    <link
      rel="stylesheet"
      href="/admin-assets/plugins/fontawesome/css/fontawesome.min.css"
    />
    <link
      rel="stylesheet"
      href="/admin-assets/plugins/fontawesome/css/all.min.css"
    />

    <link rel="stylesheet" href="/admin-assets/css/style.css" />
    <link rel="stylesheet" href="/admin-assets/css/logo.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />

    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
        .thumbnail {
            margin-right: 10px;
        }
        .error-message {
            color: red;
            display: none;
        }
        .image-cropper {
    width: 300px; /* Set a fixed width for the cropper */
    height: 300px; /* Set a fixed height for the cropper */
    overflow: hidden; /* Hide overflow if the image is larger */
    margin: 10px auto; /* Center the cropper */
}

.image-wrapper {
    position: relative; /* Position relative for absolute positioning of elements */
    width: 300px; /* Match the cropper width */
    height: 300px; /* Match the cropper height */
}

.image-wrapper img {
    max-width: 100%; /* Ensure the image fits within the wrapper */
    max-height: 100%; /* Ensure the image fits within the wrapper */
}

        
    </style>
</head>
<body>
    <div id="global-loader">
        <div class="whirly-loader"></div>
      </div>
    <div class="main-wrapper">
      <div class="header">
        <div class="header-left active">
          <a href="/admin/dashboard" class="logo">
              <%- include('../../views/partials/icons/icon-logo') %>
          </a>
        </div>

        <a id="mobile_btn" class="mobile_btn" href="#sidebar">
          <span class="bar-icon">
            <span></span>
            <span></span>
            <span></span>
          </span>
        </a>

        

        <div class="dropdown mobile-user-menu">
          <a
            href="javascript:void(0);"
            class="nav-link dropdown-toggle"
            data-bs-toggle="dropdown"
            aria-expanded="false"
            ><i class="fa fa-ellipsis-v"></i
          ></a>
          <div class="dropdown-menu dropdown-menu-right">
            <a class="dropdown-item" href="profile.html">My Profile</a>
            <a class="dropdown-item" href="generalsettings.html">Settings</a>
            <a class="dropdown-item" href="signin.html">Logout</a>
          </div>
        </div>
      </div>
    <div class="sidebar" id="sidebar">
        <div class="sidebar-inner slimscroll">
          <div id="sidebar-menu" class="sidebar-menu">
            <ul>
              <li class="">
                <a href="/admin/dashboard"><span>
                        Dashboard</span> </a>
            </li>

              <li class="">
                <a href="/admin/users"><span> Users</span> </a>
              </li>

              <li class="active">
                <a href="/admin/productList"><span> Products</span> </a>
              </li>
              <li class="">
                <a href="/admin/category"><span> Category</span> </a>
              </li>
              <li class="">
                <a href="/admin/orderList"><span> Orders</span> </a>
              </li>
              <li class="">
                <a href="/admin/coupon"><span> Coupon</span> </a>
              </li>
              <li class="">
                <a href="/admin/offer"><span> Offer</span> </a>
              </li>
              <li class="">
                <a href="/admin/salesReport"><span> Sales Report</span> </a>
              </li>
              <li class="">
                <a onclick="message(successMessage= 'Logout Successfully')" href="/admin/logout"><span> Logout</span> </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    <div class="page-wrapper">
        <div class="content">
            <div class="page-header">
                <div class="page-title">
                    <h4>Edit Product</h4>
                    <h6>Update product details</h6>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <form
                        action="/admin/products/updateProduct"
                        method="POST"
                        enctype="multipart/form-data"
                        onsubmit="return validateForm()"
                      >
                        <!-- Hidden fields -->
                        <input type="hidden" name="productId" value="<%= product._id %>" />
                        <input type="hidden" name="deletedImages" id="deletedImages" value="" />

                        <div class="row">
                          <!-- Product Name -->
                          <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group">
                              <label>Product Name</label>
                              <input
                                type="text"
                                class="form-control"
                                name="productName"
                                value="<%= product.name %>"
                                placeholder="Enter product name"
                              />
                              <p id="productName-error" class="error-message"></p>
                            </div>
                          </div>

                          <!-- Category -->
                          <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group">
                              <label>Category</label>
                              <select class="select" name="categoryId" id="categoryId">
                                <% category.forEach((cat) => { %>
                                  <option
                                    value="<%= cat._id %>"
                                    <%= cat._id.toString() === product.categoryId.toString() ? "selected" : "" %>
                                  >
                                    <%= cat.name %>
                                  </option>
                                <% }) %>
                              </select>
                              <div id="category-error" class="error-message"></div>
                            </div>
                          </div>

                          <!-- Price -->
                          <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group">
                              <label>Price</label>
                              <input
                                type="number"
                                class="form-control"
                                name="price"
                                value="<%= product.price %>"
                                placeholder="Enter product price"
                              />
                              <p id="regularPrice-error" class="error-message"></p>
                            </div>
                          </div>

                          <!-- Quantity -->
                          <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group">
                              <label>Quantity</label>
                              <input
                                type="number"
                                class="form-control"
                                name="quantity"
                                value="<%= product.quantity %>"
                              />
                              <p id="quantity-error" class="error-message"></p>
                            </div>
                          </div>

                          <!-- Description -->
                          <div class="col-lg-12">
                            <div class="form-group">
                              <label for="descriptionid">Description</label>
                              <textarea
                                class="form-control"
                                name="description"
                                id="descriptionid"
                              ><%= product.description %></textarea>
                              <p style="color: red" id="description-error" class="error-message"></p>
                            </div>
                          </div>

                          <!-- Specifications -->
                          <div class="col-lg-12">
                            <div class="form-group">
                              <label for="productSpecificationid">Product Specification</label>
                              <div id="specificationsContainer">
                                <% if (product.specification && product.specification.length > 0) { %>
                                  <% product.specification.forEach((spec, index) => { %>
                                    <div class="specification-group mb-2">
                                      <input
                                        type="text"
                                        name="specifications[<%= index %>][key]"
                                        value="<%= spec.key %>"
                                        class="form-control"
                                        placeholder="Key"
                                      />
                                      <input
                                        type="text"
                                        name="specifications[<%= index %>][value]"
                                        value="<%= spec.value %>"
                                        class="form-control mt-2"
                                        placeholder="Value"
                                      />
                                      <button
                                        type="button"
                                        class="btn btn-danger mt-2 remove-btn"
                                      >
                                        Remove
                                      </button>
                                    </div>
                                  <% }) %>
                                <% } %>
                              </div>
                              <button
                                type="button"
                                id="addSpecification"
                                class="btn btn-secondary mt-2"
                              >
                                Add Specification
                              </button>
                            </div>
                          </div>

                          <!-- Images -->
                          <div class="card mb-2">
                            <div class="card-header"><h4>Product Images</h4></div>
                            <div class="border row">
                              <div id="addedImagesContainer" class="thumbnails-container">
                                <% if (product.image && product.image.length > 0) { %>
                                  <% product.image.forEach((img, index) => { %>
                                    <div class="image-wrapper m-2" data-index="<%= index %>">
                                      <img
                                        src="<%= img.url %>"
                                        alt="Product Image"
                                        class="img-thumbnail"
                                        style="width: 150px; height: 150px; object-fit: cover;"
                                      />
                                      <button
                                        type="button"
                                        class="btn btn-danger btn-sm mt-2"
                                        onclick="deleteImage('<%= index %>')"
                                      >
                                        Delete
                                      </button>
                                    </div>
                                  <% }) %>
                                <% } %>

                              </div>
                            </div>

                            <div class="row">
                              <div
                                class="card-body align-items-center"
                                style="margin-bottom: 20px"
                              >
                                <input
                                  type="file"
                                  class="form-control"
                                  name="images"
                                  id="inputFiles"
                                  accept="image/png, image/jpeg, image/jpg"
                                  multiple
                                  onchange="handleFileSelect(event)"
                                />
                                <p id="image-error" class="error-message"></p>
                              </div>
                            </div>
                          </div>

                          <!-- Update button -->
                          <button
                            type="submit"
                            class="btn btn-update btn-md rounded font-sm hover-up"
                          >
                            Update Product
                          </button>
                        </div>
                      </form>

                </div>
            </div>
        </div>
    </div>
</div>
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
   <!-- Cropper.js CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />

<!-- Cropper.js JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>


    <script src="/admin-assets/js/jquery-3.6.0.min.js"></script>

    <script src="/admin-assets/js/feather.min.js"></script>

    <script src="/admin-assets/js/jquery.slimscroll.min.js"></script>

    <script src="/admin-assets/js/jquery.dataTables.min.js"></script>
    <script src="/admin-assets/js/dataTables.bootstrap4.min.js"></script>

    <script src="/admin-assets/js/bootstrap.bundle.min.js"></script>

    <script src="/admin-assets/plugins/select2/js/select2.min.js"></script>

    <script src="/admin-assets/plugins/sweetalert/sweetalert2.all.min.js"></script>
    <script src="/admin-assets/plugins/sweetalert/sweetalerts.min.js"></script>

    <script src="/admin-assets/js/script.js"></script>
    <script>
        
        $(document).ready(function () {
    let specificationCount = $("#specificationsContainer .specification-group").length;

    // Add new specification
    $("#addSpecification").click(function () {
      $("#specificationsContainer").append(`
        <div class="specification-group mb-2">
          <input type="text" name="specifications[${specificationCount}][key]" class="form-control" placeholder="Key">
          <input type="text" name="specifications[${specificationCount}][value]" class="form-control mt-2" placeholder="Value">
          <button type="button" class="btn btn-danger mt-2 remove-btn">Remove Specification</button>
        </div>
      `);
      specificationCount++;
    });

    // Remove specification
    $("#specificationsContainer").on("click", ".remove-btn", function () {
      $(this).parent().remove();
    });
  });

  // ================= IMAGE HANDLING ===================
  let selectedImages = [];
  let deletedImages = [];

  // Delete existing images
  function deleteImage(index) {
    deletedImages.push(index);
    document.getElementById("deletedImages").value = deletedImages.join(",");

    const wrapper = document.querySelector(`.image-wrapper[data-index="${index}"]`);
    if (wrapper) wrapper.remove();
  }

  // Handle adding new images (with cropper)
  function handleFileSelect(event) {
    const files = event.target.files;
    const container = document.getElementById("addedImagesContainer");

    selectedImages = [];
    Array.from(files).forEach((file, index) => {
      if (!file.type.startsWith("image/")) return;

      const reader = new FileReader();
      reader.onload = (e) => {
        const wrapper = document.createElement("div");
        wrapper.classList.add("image-wrapper", "m-2");
        wrapper.dataset.index = index;

        const img = document.createElement("img");
        img.src = e.target.result;
        img.style.width = "150px";
        img.style.height = "150px";
        img.style.objectFit = "cover";
        img.id = `imgView${index}`;

        const cropperContainer = document.createElement("div");
        cropperContainer.style.display = "none";
        cropperContainer.classList.add("image-cropper");
        const croppedImg = document.createElement("img");
        croppedImg.id = `croppedImg${index}`;
        cropperContainer.appendChild(croppedImg);

        const saveButton = document.createElement("button");
        saveButton.type = "button";
        saveButton.textContent = "Crop";
        saveButton.classList.add("btn", "btn-primary", "btn-sm", "mt-2");
        saveButton.id = `saveButton${index}`;
        cropperContainer.appendChild(saveButton);

        const removeButton = document.createElement("button");
        removeButton.type = "button";
        removeButton.textContent = "Remove";
        removeButton.classList.add("btn", "btn-danger", "btn-sm", "mt-2", "ml-2");

        wrapper.appendChild(img);
        wrapper.appendChild(cropperContainer);
        wrapper.appendChild(removeButton);
        container.appendChild(wrapper);

        selectedImages.push(file);

        // Initialize cropper on image click
        img.addEventListener("click", () =>
          initializeCropper(img, croppedImg, saveButton, cropperContainer, file, index)
        );

        // Remove newly selected image
        removeButton.addEventListener("click", () => {
          wrapper.remove();
          selectedImages.splice(index, 1);

          const dt = new DataTransfer();
          selectedImages.forEach((f) => dt.items.add(f));
          document.getElementById("inputFiles").files = dt.files;
        });
      };
      reader.readAsDataURL(file);
    });
  }

  function initializeCropper(img, cropperImg, saveButton, cropperContainer, file, index) {
    const cropper = new Cropper(img, { aspectRatio: 1, viewMode: 1 });
    cropperContainer.style.display = "block";

    saveButton.onclick = () => {
      const cropperCanvas = cropper.getCroppedCanvas({ width: 400, height: 400 });
      img.src = cropperCanvas.toDataURL("image/png");
      cropperImg.src = cropperCanvas.toDataURL("image/png");

      cropperCanvas.toBlob((blob) => {
        const croppedFile = new File([blob], `cropped_img_${index}.png`, { type: "image/png" });
        selectedImages[index] = croppedFile;

        const dt = new DataTransfer();
        selectedImages.forEach((f) => dt.items.add(f));
        document.getElementById("inputFiles").files = dt.files;

        cropper.destroy();
        cropperContainer.style.display = "none";
        saveButton.textContent = "Cropped";
        saveButton.disabled = true;
      }, "image/png");
    };
  }






//validation
        function validateForm() {
            clearErrorMessages();
            let isValid = true;

            const name = document.getElementsByName("productName")[0].value;
            const nameErrorElement = document.getElementById("productName-error");
            if (name.trim() === "") {
                nameErrorElement.textContent = "Product name is required.";
                nameErrorElement.style.display = "block";
                isValid = false;
            } else if (name.trim().length < 5) {
                nameErrorElement.textContent = "Product name must be at least 5 characters long.";
                nameErrorElement.style.display = "block";
                isValid = false;
            }

            const description = document.getElementById("descriptionid").value;
            const descriptionErrorElement = document.getElementById("description-error");
            if (description.trim() === "") {
                descriptionErrorElement.textContent = "Product description is required.";
                descriptionErrorElement.style.display = "block";
                isValid = false;
            }else if(description.trim().length<10){
              descriptionErrorElement.textContent = "Product description Should Be Min 10 Characters.";
                descriptionErrorElement.style.display = "block";
                isValid = false;
            }

            const price = document.getElementsByName("price")[0].value;
            const priceErrorElement = document.getElementById("regularPrice-error");
            if (price.trim() === "") {
                priceErrorElement.textContent = "Price is required.";
                priceErrorElement.style.display = "block";
                isValid = false;
            }else if(price<=0){
              priceErrorElement.textContent = "Price Should Be Min 1.";
                priceErrorElement.style.display = "block";
                isValid = false;
            }

            const quantity = document.getElementsByName("quantity")[0].value;
            const quantityErrorElement = document.getElementById("quantity-error");
            if (quantity.trim() === "") {
                quantityErrorElement.textContent = "Quantity is required.";
                quantityErrorElement.style.display = "block";
                isValid = false;
            }else if(quantity<=0){
              quantityErrorElement.textContent = "Quantity Should Be Min 1.";
                quantityErrorElement.style.display = "block";
                isValid = false;
            }

            // Product Specification Validation
            const specificationsContainer = document.getElementById("specificationsContainer");
    const specifications = specificationsContainer.getElementsByClassName("specification-group");
    let hasValidSpecifications = false;

    // Check if there are any specifications
    if (specifications.length === 0) {
        let existingErrorElement = specificationsContainer.querySelector("p");
        
        if (!existingErrorElement) {
            const specificationsErrorElement = document.createElement("p");
            specificationsErrorElement.textContent = "At least one specification is required.";
            specificationsErrorElement.style.color = "red";
            specificationsContainer.appendChild(specificationsErrorElement);
        }
        isValid = false;
    } else {
        // Validation regex to include all possible characters
        const specRegex = /^[a-zA-Z0-9\s.,!?'"():;@#%&*_\-\/\\]+$/;

        // Loop through all specification groups
        for (let i = 0; i < specifications.length; i++) {
            const keyInput = specifications[i].querySelector('input[name^="specifications"][name$="[key]"]');
            const valueInput = specifications[i].querySelector('input[name^="specifications"][name$="[value]"]');
            const keyErrorElement = specifications[i].querySelector(`[id^="invalidSpecKey"]`) || 
                specifications[i].querySelector(".spec-key-error");
            const valueErrorElement = specifications[i].querySelector(`[id^="invalidSpecValue"]`) || 
                specifications[i].querySelector(".spec-value-error");

            const key = keyInput.value.trim();
            const value = valueInput.value.trim();

            // Reset previous error messages
            if (keyErrorElement) keyErrorElement.textContent = "";
            if (valueErrorElement) valueErrorElement.textContent = "";

            let specValid = true;

            // Key validation
            if (key === "") {
                
                    keyErrorElement.textContent = "Specification key is required.";
                specValid = false;
            } else if (value.length < 2) {
                valueErrorElement.textContent = "Value must be at least 2 characters long.";
                specValid = false;
            } else if (value.length > 15) {
                valueErrorElement.textContent = "Value must be no more than 15 characters.";
                specValid = false;
            } else if (!specRegex.test(key)) {
               
                    keyErrorElement.textContent = "Key contains invalid characters.";
                specValid = false;
            }

            // Value validation
            if (value === "") {
              
                    valueErrorElement.textContent = "Specification value is required.";
                specValid = false;
            } else if (value.length < 2 || value.length > 15) {
            
                    valueErrorElement.textContent = "Value must be between 2 and 15 characters.";
                specValid = false;
            } else if (!specRegex.test(value)) {
            
                    valueErrorElement.textContent = "Value contains invalid characters.";
                specValid = false;
            }

            // If this specification is valid, mark that we have at least one valid specification
            if (specValid) {
                hasValidSpecifications = true;
            } else {
                isValid = false;
            }
        }

        // Check if there are any valid specifications
        if (!hasValidSpecifications) {
            let existingErrorElement = specificationsContainer.querySelector("p");
            
            if (!existingErrorElement) {
                const specificationsErrorElement = document.createElement("p");
                specificationsErrorElement.textContent = "Please provide valid specifications.";
                specificationsErrorElement.style.color = "red";
                specificationsContainer.appendChild(specificationsErrorElement);
            }
            isValid = false;
        }
    }

   
      
            

            const category = document.getElementsByName("categoryId")[0].value;
            const categoryErrorElement = document.getElementById("category-error");
            if (!category.trim()) {
                categoryErrorElement.textContent = "Please select a category.";
                categoryErrorElement.style.display = "block";
                isValid = false;
            }

            return isValid;
        }
      



        
        // function validateAndSubmit() {
        //     if (validateForm()) {
        //         document.forms[0].submit();
        //     }
        // }


        function message(msg){
            if(msg){
                  Swal.fire({
                    position: "center",
                    icon: "success",
                    title: msg,
                    showConfirmButton: false,
                    timer: 3000
                  }).then(() =>{
                    window.location.href = "/admin";
                  })
            }
          }
       
          
    </script>
</body>
</html>